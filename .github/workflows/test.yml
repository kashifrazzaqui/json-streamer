name: Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install yajl (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libyajl-dev

    - name: Install yajl (macOS)
      if: runner.os == 'macOS'
      run: brew install yajl

    - name: Install yajl (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Clone yajl
        git clone https://github.com/lloyd/yajl.git C:\yajl
        cd C:\yajl

        # Configure and build with cmake
        cmake -G "Visual Studio 17 2022" -A x64 .
        cmake --build . --config Release

        # Find the DLL (it might be in different locations)
        Get-ChildItem -Path C:\yajl -Recurse -Filter "yajl.dll" | ForEach-Object {
          Write-Host "Found DLL at: $($_.FullName)"
        }

        # Add Release directory to PATH
        echo "C:\yajl\Release" >> $env:GITHUB_PATH

        # Verify
        if (Test-Path "C:\yajl\Release\yajl.dll") {
          Write-Host "✓ yajl.dll found and ready"
        } else {
          Write-Host "⚠ yajl.dll not in Release folder, searching..."
          $dll = Get-ChildItem -Path C:\yajl -Recurse -Filter "yajl.dll" | Select-Object -First 1
          if ($dll) {
            Write-Host "Found DLL at: $($dll.FullName)"
            echo "$($dll.DirectoryName)" >> $env:GITHUB_PATH
          } else {
            Write-Error "✗ yajl.dll not found anywhere!"
            exit 1
          }
        }

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run tests with coverage
      run: |
        uv run pytest tests/ -v --cov=jsonstreamer --cov-report=term-missing --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run ruff
      run: |
        uv run ruff check .

    - name: Run black check
      run: |
        uv run black --check .

    - name: Run mypy
      run: |
        uv run mypy jsonstreamer --ignore-missing-imports
      continue-on-error: true  # mypy with ctypes is tricky
