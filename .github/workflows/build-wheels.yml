name: Build Wheels

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.5

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*
          CIBW_SKIP: "*-musllinux_* pp*"

          # Linux
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y cmake gcc git ||
            apt-get update && apt-get install -y cmake gcc git ||
            apk add cmake gcc git musl-dev
          CIBW_ENVIRONMENT_LINUX: >
            CFLAGS="-I/project/build/yajl_build/yajl/build/yajl-2.1.0/include"
            LDFLAGS="-L/project/build/yajl_build/yajl/build/yajl-2.1.0/lib"

          # macOS
          CIBW_BEFORE_ALL_MACOS: >
            brew install cmake || true
          CIBW_ENVIRONMENT_MACOS: >
            CFLAGS="-I/Users/runner/work/json-streamer/json-streamer/build/yajl_build/yajl/build/yajl-2.1.0/include"
            LDFLAGS="-L/Users/runner/work/json-streamer/json-streamer/build/yajl_build/yajl/build/yajl-2.1.0/lib"

          # Windows
          CIBW_BEFORE_ALL_WINDOWS: >
            python -m pip install cmake
          CIBW_ENVIRONMENT_WINDOWS: >
            INCLUDE="D:\\a\\json-streamer\\json-streamer\\build\\yajl_build\\yajl\\src\\api"
            LIB="D:\\a\\json-streamer\\json-streamer\\build\\yajl_build\\yajl\\Release"

          # Build yajl before building the wheel
          CIBW_BEFORE_BUILD: python build_yajl.py

          # Repair wheels to bundle dependencies
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair -w {dest_dir} {wheel}

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build
        run: python -m pip install build

      - name: Build sdist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    permissions:
      id-token: write  # For trusted publishing

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
