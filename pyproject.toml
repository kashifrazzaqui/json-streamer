[build-system]
requires = ["setuptools>=61.0", "wheel", "cffi>=1.15.0"]
build-backend = "setuptools.build_meta"

[project]
name = "jsonstreamer"
version = "2.0.0"
description = "Provides a SAX-like push parser which works with partial json fragments. Also provides an ObjectStreamer that emits key-value pairs or array elements of the root json object/array. Based on the fast c library yajl with bundled wheels."
authors = [
    {name = "Kashif Razzaqui", email = "kashif.razzaqui@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["json", "streaming", "parser", "yajl", "sax"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
]

dependencies = [
    "cffi>=1.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
]
build = [
    "cibuildwheel>=2.16.0",
    "build>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/kashifrazzaqui/json-streamer"
Repository = "https://github.com/kashifrazzaqui/json-streamer"
Issues = "https://github.com/kashifrazzaqui/json-streamer/issues"

[project.scripts]
jsonstreamer = "jsonstreamer.jsonstreamer:run"

[tool.setuptools]
packages = ["jsonstreamer", "jsonstreamer.yajl"]

[tool.setuptools.package-data]
"jsonstreamer.yajl" = ["*.so", "*.dll", "*.dylib"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test*.py"
addopts = "-v --cov=jsonstreamer --cov-report=term-missing"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[tool.ruff]
line-length = 120
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "T20", "SIM"]
ignore = [
    "N818",  # Exception naming - JSONStreamerException is fine
    "N803",  # Argument casing - matches yajl C API (boolVal, stringVal, etc)
    "T201",  # print() in run() function and demos is intentional
    "B027",  # Empty methods in ABC are hooks, not abstract
]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.cibuildwheel]
# Build for common platforms
build = ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*", "cp313-*"]
skip = ["*-musllinux_*", "pp*"]  # Skip PyPy and musl for now

# Linux build settings
[tool.cibuildwheel.linux]
before-all = [
    "yum install -y cmake gcc || apt-get update && apt-get install -y cmake gcc || apk add cmake gcc musl-dev",
    "git clone https://github.com/lloyd/yajl.git /tmp/yajl",
    "cd /tmp/yajl && ./configure && make && make install",
    "ldconfig || true",
]
environment = {CFLAGS = "-I/usr/local/include", LDFLAGS = "-L/usr/local/lib"}

# macOS build settings
[tool.cibuildwheel.macos]
before-all = [
    "brew install yajl || (git clone https://github.com/lloyd/yajl.git /tmp/yajl && cd /tmp/yajl && ./configure && make && make install)",
]
environment = {CFLAGS = "-I/usr/local/include", LDFLAGS = "-L/usr/local/lib"}

# Windows build settings
[tool.cibuildwheel.windows]
before-build = [
    "git clone https://github.com/lloyd/yajl.git C:\\yajl",
    "cd C:\\yajl && cmake . && cmake --build . --config Release",
]
environment = {INCLUDE = "C:\\yajl\\include", LIB = "C:\\yajl\\Release"}
